


allprojects {
	apply plugin: 'java'
	apply plugin: 'maven'
	apply plugin: 'antlr'
	apply plugin: 'eclipse'
}

eclipse {
    project {
    	file {
    		beforeMerged { project ->
    			project.natures.clear()
			}
    	}
    }
    classpath {
    	file {
    		beforeMerged { classpath ->
       			classpath.entries.removeAll {
        			entry -> entry.kind == 'lib' || entry.kind == 'var'
        		}
    		}
    		whenMerged { classpath ->
        		classpath.entries.findAll { entry -> entry.kind == 'lib' }*.exported = false
    		}
		}
    }
}


sourceSets {
	main {
		java {
			srcDirs = ["src/main"]
		}
	}
	test {
		java {
			srcDirs = ["src/test"]
		}
        output.classesDir = "$buildDir/test-classes" as File
    }
}

repositories{
    maven { url "http://www.aQute.biz/repo" } // tools
    //maven { url "http://repository.jboss.org/maven2" } // examples, tools
    mavenCentral();
}


ext.antlrVersion = '2.7.7'
ext.antAntlrVersion = '1.8.4'
ext.commonEmailVersion = '1.1'
ext.commonLogginVersion = '1.1.1'
ext.commonCodecVersion = '1.4'
ext.commonHttpclientVersion = '3.0.1'
ext.junitVersion = '4.10'
ext.slf4jVersion = '1.6.1'
ext.mockitoVersion = '1.9.5'
ext.log4jVersion = '1.2.16'
ext.asmVersion = '4.0'
ext.asmAnalysisVersion = '4.0'
ext.asmCommonsVersion = '4.0'
ext.asmTreeVersion = '4.0'
ext.asmUtilVersion = '4.0'
ext.asmSupportVersion = '0.3'

dependencies {
    compile "antlr:antlr:${antlrVersion}"
    compile "org.apache.ant:ant-antlr:${antAntlrVersion}"
    compile "commons-email:commons-email:${commonEmailVersion}"

    testCompile "junit:junit:${junitVersion}"

    compile "log4j:log4j:${log4jVersion}"
    compile "org.ow2.asm:asm:${asmVersion}"
    compile "org.ow2.asm:asm-analysis:${asmAnalysisVersion}"
    compile "org.ow2.asm:asm-commons:${asmCommonsVersion}"
    compile "org.ow2.asm:asm-tree:${asmTreeVersion}"
    compile "org.ow2.asm:asm-util:${asmUtilVersion}"

    compile "commons-logging:commons-logging:${commonLogginVersion}"
    compile "commons-codec:commons-codec:${commonCodecVersion}"
    compile("commons-httpclient:commons-httpclient:${commonHttpclientVersion}") {
        exclude(module: 'junit')
        exclude(module: 'commons-logging')
        exclude(module: 'commons-codec')
    }


    //compile "cn.wensiqun:asmsupport:${asmSupportVersion}"

    antlr "org.apache.ant:ant-antlr:${antAntlrVersion}"

    testCompile "junit:junit:${junitVersion}"
    testCompile "xmlunit:xmlunit:1.3"
    testCompile "org.mockito:mockito-core:${mockitoVersion}"
    testCompile "ch.qos.logback:logback-classic:0.9.21"
    testCompile "log4j:log4j:${log4jVersion}"
    testCompile "org.slf4j:slf4j-api:${slf4jVersion}"
    testCompile "org.slf4j:slf4j-log4j12:${slf4jVersion}"
    testCompile "org.slf4j:jcl-over-slf4j:${slf4jVersion}"
}

configurations {
    antlr
    jaxDoclet
}

def soyaVersion = '1.0.1-alpha'

def soyaMainClass = 'org.soya.main.SoyaMain'

task sourcesJar(type: Jar, dependsOn: compileJava) {
    from sourceSets.main.allSource
    classifier = 'sources'
}

compileTestJava {
	options.define(compilerArgs: ["-proc:none", "-encoding", "UTF-8"])
}


test {
	maxHeapSize = "1024m"
	systemProperty("java.awt.headless", "true")
}

task generateAntlr {
    description = "Genreate Antlr source."
    ext.grammarDir = "$projectDir/src/main/org/soya/antlr"
    ext.grammarName = "soya.g"
    ext.soyaParserDir = "$ext.grammarDir/parser"
    ext.soyaOutDir = "$ext.grammarDir/parser"
    inputs.dir(grammarDir)
    outputs.dir(soyaOutDir)

    doFirst {
        new File(soyaOutDir).mkdirs()
        ant {
            taskdef(name: 'antlr',
                    classname: 'org.apache.tools.ant.taskdefs.optional.ANTLR',
                    classpath: configurations.antlr.asPath)
            antlr(target: "$ext.grammarDir/$ext.grammarName",
            	  outputdirectory: ext.soyaParserDir) {
                classpath path: configurations.compile.asPath
            }
        }
    }
}

task copyJars(type: Copy) {
    from configurations.runtime
    into 'build/libs'
}

ext.distSpec = copySpec {
    from("$projectDir") {
        include "LICENSE.txt", "README.md"
    }
    into("libs") {
        from jar.archivePath
        from({
            configurations.runtime.findAll { it.name.endsWith 'jar' } +
                    modules()*.jar.archivePath +
                    modules().configurations.runtime*.findAll {
                        it.name.endsWith('jar') && !it.name.matches(/soya(\w)*.*/)
                    }.flatten() as Set
        })
    }
    into("bin") {
        from "src/bin"
    }
}


compileJava {
	dependsOn generateAntlr
    dependsOn copyJars
}


jar {
    def libNames = []
    sourceSets.main.runtimeClasspath.each {
        def lname = it.name
        if (lname.endsWith('.jar')) {
            libNames.add lname
        }
    }
    manifest {
        attributes 'Implementation-Title': 'Soya',
                'Implementation-Version': soyaVersion,
                "Eclipse-BuddyPolicy": 'dependent',
                "Bundle-ClassPath": '.',
                "Bundle-RequiredExecutionEnvironment": 'J2SE-1.6',
                "DynamicImport-Package": '*',
                "Class-Path": libNames.join(' '),
                "Main-class": soyaMainClass
    }
}

def installDir = "$buildDir/install"

task copyLincense(type: Copy) {
    from("$projectDir") {
        include "LICENSE.txt", "README.md"
    }
    into "$installDir"
}

task copyLibs(type: Copy, dependsOn: build) {
    from jar.archivePath
    from configurations.runtime
    into "$installDir/libs"
}

task copyBin(type: Copy, dependsOn: copyLibs) {
    from "src/bin"
    into "$installDir/bin"
}

task copyDoc(type: Copy) {
    from "src/doc"
    into "$installDir/doc"
}

task copySample(type: Copy) {
    from "$projectDir/sample"
    into "$installDir/sample"
}

task installSoya(type: Sync) {
    dependsOn copyLincense
    dependsOn copyBin
    dependsOn copyDoc
    dependsOn copySample
}


task dist(type: Zip) {
    dependsOn installSoya
    from "$installDir"
    into "soya-${soyaVersion}"
}


apply from: 'gradle/doc.gradle'
apply from: 'gradle/idea.gradle'

task wrapper(type: Wrapper) {
    gradleVersion = '1.3'
}




